source("dipsilverman.R")
# Check if the 'sparsepca' package is already installed
if (!require("sparsepca")) {
# If not, install the package
install.packages("sparsepca")
}
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
#### Load Categorical-to-Numerical(CDE+CDCDR) file ####
# Set the path of the specific subdirectory
my_dir <- "Categorical-to-Numerical(CDE+CDCDR)"
# Get the paths of the .txt files in the subdirectory
txt_paths <- list.files(my_dir, pattern = "\\.txt$", recursive = TRUE, full.names = TRUE)
# Read all TXT files
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
######################################################
# [1]lenses [2]lung_cancer [3]soybean_small [4]zoo [5]dna_promoter [6]hayes_roth [7]lymphography [8]heart_disease [9]solar_flare
# [10]primary_tumor [11]dermatology [12]house_votes [13]balance_scale [14]credit_approval
# [15]breast_cancer_wisconsin [16]mammographic_mass [17]tic_tac_toe [18]car
data_obj_list <-c("lenses", "lung_cancer", "soybean_small", "zoo", "dna_promoter", "hayes_roth",
"lymphography", "heart_disease", "solar_flare", "primary_tumor", "dermatology", "house_votes", "balance_scale", "credit_approval",
"breast_cancer_wisconsin", "mammographic_mass", "tic_tac_toe", "car")
ODS_CDE <- paste("ODS_", data_obj_list, "_CDE", sep = "")
CRDS_CDE <- paste("CRDS_", data_obj_list, "_CDE", sep = "")
ODS_CDCDR <- paste("ODS_", data_obj_list, "_CDCDR", sep = "")
CRDS_CDCDR <- paste("CRDS_", data_obj_list, "_CDCDR", sep = "")
################### Results_ODS_CDE ######################
Results_ODS_CDE <- matrix(0, nrow = 18, ncol = 4)
for (i in 1:18){
print("Results_ODS_CDE:")
print(i)
x <- get(ODS_CDE[i])
#PCA
fit1 <- stats::prcomp(x, center = TRUE, scale. = FALSE, retx = TRUE)$x[, 1]
Results_ODS_CDE[i,1] <- dip(fit1, d_simulatepvalue, d_reps)$p.value
Results_ODS_CDE[i,2] <- silverman(fit1, s_k, s_m, s_adjust, s_setseed)$p_value
#SPCA
fit2 <- spca(x, k = 1)$scores
Results_ODS_CDE[i,3] <- dip(fit2, d_simulatepvalue, d_reps)$p.value
Results_ODS_CDE[i,4] <- silverman(fit2, s_k, s_m, s_adjust, s_setseed)$p_value
}
write.table(Results_ODS_CDE, file="Results_ODS_CDE.txt", sep=",", col.names=FALSE, row.names=FALSE)
################### Results_CRDS_CDE ######################
Results_CRDS_CDE <- matrix(0, nrow = 18, ncol = 4)
for (i in 1:18){
print("Results_CRDS_CDE:")
print(i)
x <- get(CRDS_CDE[i])
#PCA
fit1 <- stats::prcomp(x, center = TRUE, scale. = FALSE, retx = TRUE)$x[, 1]
Results_CRDS_CDE[i,1] <- dip(fit1, d_simulatepvalue, d_reps)$p.value
Results_CRDS_CDE[i,2] <- silverman(fit1, s_k, s_m, s_adjust, s_setseed)$p_value
#SPCA
fit2 <- spca(x, k = 1)$scores
Results_CRDS_CDE[i,3] <- dip(fit2, d_simulatepvalue, d_reps)$p.value
Results_CRDS_CDE[i,4] <- silverman(fit2, s_k, s_m, s_adjust, s_setseed)$p_value
}
write.table(Results_CRDS_CDE, file="Results_CRDS_CDE.txt", sep=",", col.names=FALSE, row.names=FALSE)
################### Results_ODS_CDCDR ######################
Results_ODS_CDCDR <- matrix(0, nrow = 18, ncol = 4)
for (i in 1:18){
print("Results_ODS_CDCDR:")
print(i)
x <- get(ODS_CDCDR[i])
#PCA
fit1 <- stats::prcomp(x, center = TRUE, scale. = FALSE, retx = TRUE)$x[, 1]
Results_ODS_CDCDR[i,1] <- dip(fit1, d_simulatepvalue, d_reps)$p.value
Results_ODS_CDCDR[i,2] <- silverman(fit1, s_k, s_m, s_adjust, s_setseed)$p_value
#SPCA
fit2 <- spca(x, k = 1)$scores
Results_ODS_CDCDR[i,3] <- dip(fit2, d_simulatepvalue, d_reps)$p.value
Results_ODS_CDCDR[i,4] <- silverman(fit2, s_k, s_m, s_adjust, s_setseed)$p_value
}
write.table(Results_ODS_CDCDR, file="Results_ODS_CDCDR.txt", sep=",", col.names=FALSE, row.names=FALSE)
################### Results_CRDS_CDCDR ######################
Results_CRDS_CDCDR <- matrix(0, nrow = 18, ncol = 4)
for (i in 1:18){
print("Results_CRDS_CDCDR:")
print(i)
x <- get(CRDS_CDCDR[i])
#PCA
fit1 <- stats::prcomp(x, center = TRUE, scale. = FALSE, retx = TRUE)$x[, 1]
Results_CRDS_CDCDR[i,1] <- dip(fit1, d_simulatepvalue, d_reps)$p.value
Results_CRDS_CDCDR[i,2] <- silverman(fit1, s_k, s_m, s_adjust, s_setseed)$p_value
#SPCA
fit2 <- spca(x, k = 1)$scores
Results_CRDS_CDCDR[i,3] <- dip(fit2, d_simulatepvalue, d_reps)$p.value
Results_CRDS_CDCDR[i,4] <- silverman(fit2, s_k, s_m, s_adjust, s_setseed)$p_value
}
write.table(Results_CRDS_CDCDR, file="Results_CRDS_CDCDR.txt", sep=",", col.names=FALSE, row.names=FALSE)
View(Results_CRDS_CDCDR)
getwd()
source("dipsilverman.R")
source("dist4cate.R")
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
#### Load Categorical-to-Numerical(CDE+CDCDR) file ####
# Set the path of the specific subdirectory
my_dir <- file.path(getwd(), "..")
my_dir
sub_dirs <- file.path(my_dir, c("ODS", "CRDS"))
sub_dirs
parent_dir <- dirname(getwd())
parent_dir
source("dipsilverman.R")
source("dist4cate.R")
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
############ Load Load ODS and CRDS files ############
# Get the path of the current working directory's parent directory
parent_dir <- dirname(getwd())
# Get the paths of the subdirectories
sub_dirs <- file.path(parent_dir, c("ODS", "CRDS"))
# Get the paths of TXT files in the subdirectories
txt_paths <- unlist(lapply(sub_dirs, function(x) list.files(x, pattern = "\\.txt$", full.names = TRUE)))
txt_paths
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
scale()
scale
x <- get(ODSs[1])
source("dipsilverman.R")
source("dist4cate.R")
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
############ Load Load ODS and CRDS files ############
# Get the path of the current working directory's parent directory
parent_dir <- dirname(getwd())
# Get the paths of the subdirectories
sub_dirs <- file.path(parent_dir, c("ODS", "CRDS"))
# Get the paths of TXT files in the subdirectories
txt_paths <- unlist(lapply(sub_dirs, function(x) list.files(x, pattern = "\\.txt$", full.names = TRUE)))
# Read all TXT files
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
######################################################
# [1]lenses [2]lung_cancer [3]soybean_small [4]zoo [5]dna_promoter [6]hayes_roth [7]lymphography [8]heart_disease [9]solar_flare
# [10]primary_tumor [11]dermatology [12]house_votes [13]balance_scale [14]credit_approval
# [15]breast_cancer_wisconsin [16]mammographic_mass [17]tic_tac_toe [18]car
data_obj_list <-c("lenses", "lung_cancer", "soybean_small", "zoo", "dna_promoter", "hayes_roth",
"lymphography", "heart_disease", "solar_flare", "primary_tumor", "dermatology", "house_votes", "balance_scale", "credit_approval",
"breast_cancer_wisconsin", "mammographic_mass", "tic_tac_toe", "car")
ODSs <- paste("ODS_", data_obj_list, "_CDE", sep = "")
CRDSs <- paste("CRDS_", data_obj_list, "_CDE", sep = "")
x <- get(ODSs[1])
source("dipsilverman.R")
source("dist4cate.R")
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
############ Load Load ODS and CRDS files ############
# Get the path of the current working directory's parent directory
parent_dir <- dirname(getwd())
# Get the paths of the subdirectories
sub_dirs <- file.path(parent_dir, c("ODS", "CRDS"))
# Get the paths of TXT files in the subdirectories
txt_paths <- unlist(lapply(sub_dirs, function(x) list.files(x, pattern = "\\.txt$", full.names = TRUE)))
# Read all TXT files
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
######################################################
# [1]lenses [2]lung_cancer [3]soybean_small [4]zoo [5]dna_promoter [6]hayes_roth [7]lymphography [8]heart_disease [9]solar_flare
# [10]primary_tumor [11]dermatology [12]house_votes [13]balance_scale [14]credit_approval
# [15]breast_cancer_wisconsin [16]mammographic_mass [17]tic_tac_toe [18]car
data_obj_list <-c("lenses", "lung_cancer", "soybean_small", "zoo", "dna_promoter", "hayes_roth",
"lymphography", "heart_disease", "solar_flare", "primary_tumor", "dermatology", "house_votes", "balance_scale", "credit_approval",
"breast_cancer_wisconsin", "mammographic_mass", "tic_tac_toe", "car")
ODSs <- paste("ODS_", data_obj_list, sep = "")
CRDSs <- paste("CRDS_", data_obj_list, sep = "")
x <- get(ODSs[1])
as.vector(dist4cate(x, measure = "anderberg"))
library(nomclust)
library(nomclust)
fit1 <- as.vector(dist4cate(x, measure = "anderberg"))
fit1 <- scale(fit1)
dip(fit1, d_simulatepvalue, d_reps)$p.value
dip
dist4cate
fit2 <- as.vector(dist4cate(x, measure = "burnaby"))
fit2 <- scale(fit1)
dip(fit2, d_simulatepvalue, d_reps)$p.value
source("dipsilverman.R")
source("dist4cate.R")
library(nomclust)
test4dist(x, "DIP", measure = "eskin")
source("dipsilverman.R")
source("dist4cate.R") # functions: "dist4cate" "test4dist"
library(nomclust)
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
############ Load Load ODS and CRDS files ############
# Get the path of the current working directory's parent directory
parent_dir <- dirname(getwd())
# Get the paths of the subdirectories
sub_dirs <- file.path(parent_dir, c("ODS", "CRDS"))
# Get the paths of TXT files in the subdirectories
txt_paths <- unlist(lapply(sub_dirs, function(x) list.files(x, pattern = "\\.txt$", full.names = TRUE)))
# Read all TXT files
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
######################################################
# [1]lenses [2]lung_cancer [3]soybean_small [4]zoo [5]dna_promoter [6]hayes_roth [7]lymphography [8]heart_disease [9]solar_flare
# [10]primary_tumor [11]dermatology [12]house_votes [13]balance_scale [14]credit_approval
# [15]breast_cancer_wisconsin [16]mammographic_mass [17]tic_tac_toe [18]car
data_obj_list <-c("lenses", "lung_cancer", "soybean_small", "zoo", "dna_promoter", "hayes_roth",
"lymphography", "heart_disease", "solar_flare", "primary_tumor", "dermatology", "house_votes", "balance_scale", "credit_approval",
"breast_cancer_wisconsin", "mammographic_mass", "tic_tac_toe", "car")
ODSs <- paste("ODS_", data_obj_list, sep = "")
CRDSs <- paste("CRDS_", data_obj_list, sep = "")
##################################################
# ODS
##################################################
Results_ODS_Distances <- matrix(0, nrow = 40, ncol = 18)
for (i in 1:18){
x <- get(ODSs[i])
print("Results_ODS_Distances:")
print(i)
Results_ODS_Distances[1,i] <- test4dist(x, "DIP", measure = "anderberg" )
Results_ODS_Distances[2,i] <- test4dist(x, "DIP", measure = "burnaby" )
Results_ODS_Distances[3,i] <- test4dist(x, "DIP", measure = "eskin")
Results_ODS_Distances[4,i] <- test4dist(x, "DIP", measure = "gambaryan")
Results_ODS_Distances[5,i] <- test4dist(x, "DIP", measure = "good1")
Results_ODS_Distances[6,i] <- test4dist(x, "DIP", measure = "good2")
Results_ODS_Distances[7,i] <- test4dist(x, "DIP", measure = "good3")
Results_ODS_Distances[8,i] <- test4dist(x, "DIP", measure = "good4")
Results_ODS_Distances[9,i] <- test4dist(x, "DIP", measure = "goodall1")
Results_ODS_Distances[10,i] <- test4dist(x, "DIP", measure = "goodall2")
Results_ODS_Distances[11,i] <- test4dist(x, "DIP", measure = "goodall3")
Results_ODS_Distances[12,i] <- test4dist(x, "DIP", measure = "goodall4")
Results_ODS_Distances[13,i] <- test4dist(x, "DIP", measure = "iof")
Results_ODS_Distances[14,i] <- test4dist(x, "DIP", measure = "lin")
Results_ODS_Distances[15,i] <- test4dist(x, "DIP", measure = "lin1")
Results_ODS_Distances[16,i] <- test4dist(x, "DIP", measure = "of")
Results_ODS_Distances[17,i] <- test4dist(x, "DIP", measure = "sm")
Results_ODS_Distances[18,i] <- test4dist(x, "DIP", measure = "smirnov")
Results_ODS_Distances[19,i] <- test4dist(x, "DIP", measure = "ve")
Results_ODS_Distances[20,i] <- test4dist(x, "DIP", measure = "vm")
Results_ODS_Distances[21,i] <- test4dist(x, "SILVERMAN", measure = "anderberg")
Results_ODS_Distances[22,i] <- test4dist(x, "SILVERMAN", measure = "burnaby")
Results_ODS_Distances[23,i] <- test4dist(x, "SILVERMAN", measure = "eskin")
Results_ODS_Distances[24,i] <- test4dist(x, "SILVERMAN", measure = "gambaryan")
Results_ODS_Distances[25,i] <- test4dist(x, "SILVERMAN", measure = "good1")
Results_ODS_Distances[26,i] <- test4dist(x, "SILVERMAN", measure = "good2")
Results_ODS_Distances[27,i] <- test4dist(x, "SILVERMAN", measure = "good3")
Results_ODS_Distances[28,i] <- test4dist(x, "SILVERMAN", measure = "good4")
Results_ODS_Distances[29,i] <- test4dist(x, "SILVERMAN", measure = "goodall1")
Results_ODS_Distances[30,i] <- test4dist(x, "SILVERMAN", measure = "goodall2")
Results_ODS_Distances[31,i] <- test4dist(x, "SILVERMAN", measure = "goodall3")
Results_ODS_Distances[32,i] <- test4dist(x, "SILVERMAN", measure = "goodall4")
Results_ODS_Distances[33,i] <- test4dist(x, "SILVERMAN", measure = "iof")
Results_ODS_Distances[34,i] <- test4dist(x, "SILVERMAN", measure = "lin")
Results_ODS_Distances[35,i] <- test4dist(x, "SILVERMAN", measure = "lin1")
Results_ODS_Distances[36,i] <- test4dist(x, "SILVERMAN", measure = "of")
Results_ODS_Distances[37,i] <- test4dist(x, "SILVERMAN", measure = "sm")
Results_ODS_Distances[38,i] <- test4dist(x, "SILVERMAN", measure = "smirnov")
Results_ODS_Distances[39,i] <- test4dist(x, "SILVERMAN", measure = "ve")
Results_ODS_Distances[40,i] <- test4dist(x, "SILVERMAN", measure = "vm")
}
library("smacof")
library("Rtsne")
library("uwot")
if (!require("smacof", quietly = TRUE))
install.packages("smacof")
library(smacof)
library(Rtsne)
if (!require("Rtsne", quietly = TRUE))
install.packages("Rtsne")
library(smacof)# MDS
library(Rtsne) # tSNE
library(uwot)
library(uwot)
if (!require("Rtsne", quietly = TRUE))
install.packages("uwot")
library(uwot)
if (!require("uwot", quietly = TRUE))
install.packages("uwot")
library(uwot)
source("dipsilverman.R")
if (!require("smacof", quietly = TRUE))
install.packages("smacof")
if (!require("Rtsne", quietly = TRUE))
install.packages("Rtsne")
if (!require("uwot", quietly = TRUE))
install.packages("uwot")
library(smacof)# MDS
library(Rtsne) # tSNE
library(uwot)  # UMAP
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
############ Load Load ODS and CRDS files ############
# Get the path of the current working directory's parent directory
parent_dir <- dirname(getwd())
# Get the paths of the subdirectories
sub_dirs <- file.path(parent_dir, c("ODS", "CRDS"))
# Get the paths of TXT files in the subdirectories
txt_paths <- unlist(lapply(sub_dirs, function(x) list.files(x, pattern = "\\.txt$", full.names = TRUE)))
# Read all TXT files
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
######################################################
# [1]lenses [2]lung_cancer [3]soybean_small [4]zoo [5]dna_promoter [6]hayes_roth [7]lymphography [8]heart_disease [9]solar_flare
# [10]primary_tumor [11]dermatology [12]house_votes [13]balance_scale [14]credit_approval
# [15]breast_cancer_wisconsin [16]mammographic_mass [17]tic_tac_toe [18]car
data_obj_list <-c("lenses", "lung_cancer", "soybean_small", "zoo", "dna_promoter", "hayes_roth",
"lymphography", "heart_disease", "solar_flare", "primary_tumor", "dermatology", "house_votes", "balance_scale", "credit_approval",
"breast_cancer_wisconsin", "mammographic_mass", "tic_tac_toe", "car")
ODSs <- paste("ODS_", data_obj_list, sep = "")
CRDSs <- paste("CRDS_", data_obj_list, sep = "")
##################################################
# ODS
##################################################
# Hamming Distance
##################################################Results_ODS_Distances
Results_ODS_Hamming_tSNE_Dip <- matrix(0, nrow = 18, ncol = 100)
Results_ODS_Hamming_UMAP_Dip <- matrix(0, nrow = 18, ncol = 100)
Results_ODS_Hamming_MDS_Dip <- matrix(0, nrow = 18, ncol = 100)
Results_ODS_Hamming_tSNE_Silv <- matrix(0, nrow = 18, ncol = 100)
Results_ODS_Hamming_UMAP_Silv <- matrix(0, nrow = 18, ncol = 100)
Results_ODS_Hamming_MDS_Silv <- matrix(0, nrow = 18, ncol = 100)
x <- get(ODSs[1])
sm(x)
library(nomclust)
sm(x)
##**********************************************##
##______________________________________________##
______________________________________________
source("dipsilverman.R")
if (!require("smacof", quietly = TRUE))
install.packages("smacof")
if (!require("Rtsne", quietly = TRUE))
install.packages("Rtsne")
if (!require("uwot", quietly = TRUE))
install.packages("uwot")
library(nomclust) # Hamming/Lin1
library(smacof)# MDS
library(Rtsne) # tSNE
library(uwot)  # UMAP
################### Default parameters ################
# "DIP"
d_simulatepvalue = FALSE
d_reps = 2000
# "SILVERMAN"
s_k = 1
s_m = 999
s_adjust = TRUE
s_digits = 0
s_setseed = 123
RunningTimes = 100
############ Load Load ODS and CRDS files ############
# Get the path of the current working directory's parent directory
parent_dir <- dirname(getwd())
# Get the paths of the subdirectories
sub_dirs <- file.path(parent_dir, c("ODS", "CRDS"))
# Get the paths of TXT files in the subdirectories
txt_paths <- unlist(lapply(sub_dirs, function(x) list.files(x, pattern = "\\.txt$", full.names = TRUE)))
# Read all TXT files
for (txt_path in txt_paths) {
file_name <- gsub(".txt$", "", basename(txt_path))
assign(file_name, read.csv(txt_path, header = FALSE, colClasses = "numeric"))}
######################################################
# [1]lenses [2]lung_cancer [3]soybean_small [4]zoo [5]dna_promoter [6]hayes_roth [7]lymphography [8]heart_disease [9]solar_flare
# [10]primary_tumor [11]dermatology [12]house_votes [13]balance_scale [14]credit_approval
# [15]breast_cancer_wisconsin [16]mammographic_mass [17]tic_tac_toe [18]car
data_obj_list <-c("lenses", "lung_cancer", "soybean_small", "zoo", "dna_promoter", "hayes_roth",
"lymphography", "heart_disease", "solar_flare", "primary_tumor", "dermatology", "house_votes", "balance_scale", "credit_approval",
"breast_cancer_wisconsin", "mammographic_mass", "tic_tac_toe", "car")
ODSs <- paste("ODS_", data_obj_list, sep = "")
CRDSs <- paste("CRDS_", data_obj_list, sep = "")
##################################################
# ODS | Hamming Distance
##################################################
Results_ODS_Hamming_tSNE_Dip <- matrix(0, nrow = 18, ncol = RunningTimes)
Results_ODS_Hamming_UMAP_Dip <- matrix(0, nrow = 18, ncol = RunningTimes)
Results_ODS_Hamming_MDS_Dip <- matrix(0, nrow = 18, ncol = RunningTimes)
Results_ODS_Hamming_tSNE_Silv <- matrix(0, nrow = 18, ncol = RunningTimes)
Results_ODS_Hamming_UMAP_Silv <- matrix(0, nrow = 18, ncol = RunningTimes)
Results_ODS_Hamming_MDS_Silv <- matrix(0, nrow = 18, ncol = RunningTimes)
##################################################
for (i in 1:18){
x <- get(ODSs[i])
N <- nrow(x)
pt <- min(floor((nrow(x) - 1) / 3), 30)
dist_hamming = sm(x)
print("ODSs (Hamming)")
print(i)
for (r in 1:RunningTimes){
set.seed(r)
fit1 <- Rtsne(dist_hamming, dims=1, perplexity = pt, is_distance = TRUE)$Y
# Scale the data
fit1 <- scale(fit1)
Results_ODS_Hamming_tSNE_Dip[i,r] <- dip(fit1, d_simulatepvalue, d_reps)$p.value
Results_ODS_Hamming_tSNE_Silv[i,r] <- silverman(fit1, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
set.seed(r)
fit2 <- umap(dist_hamming, n_components=1)
# Scale the data
fit2 <- scale(fit2)
Results_ODS_Hamming_UMAP_Dip[i,r] <- dip(fit2, d_simulatepvalue, d_reps)$p.value
Results_ODS_Hamming_UMAP_Silv[i,r] <- silverman(fit2, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
set.seed(r)
fit3 <- mds(dist_hamming, ndim = 1, type="ordinal", init = "random", ties="secondary")$conf
# Scale the data
fit3 <- scale(fit3)
Results_ODS_Hamming_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
Results_ODS_Hamming_MDS_Silv[i,r] <- silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
}
write.table(Results_ODS_Hamming_tSNE_Dip, file="Results_ODS_Hamming_tSNE_Dip.csv", sep=",", col.names=FALSE, row.names=FALSE)
write.table(Results_ODS_Hamming_tSNE_Silv, file="Results_ODS_Hamming_tSNE_Silv.csv", sep=",", col.names=FALSE, row.names=FALSE)
write.table(Results_ODS_Hamming_UMAP_Dip, file="Results_ODS_Hamming_UMAP_Dip.csv", sep=",", col.names=FALSE, row.names=FALSE)
write.table(Results_ODS_Hamming_UMAP_Silv, file="Results_ODS_Hamming_UMAP_Silv.csv", sep=",", col.names=FALSE, row.names=FALSE)
write.table(Results_ODS_Hamming_MDS_Dip, file="Results_ODS_Hamming_MDS_Dip.csv", sep=",", col.names=FALSE, row.names=FALSE)
write.table(Results_ODS_Hamming_MDS_Silv, file="Results_ODS_Hamming_MDS_Silv.csv", sep=",", col.names=FALSE, row.names=FALSE)
}
lin1(x)
dist_lin1 = lin1(x)
Rtsne(dist_lin1, dims=1, perplexity = pt, is_distance = TRUE)$Y
dip(fit1, d_simulatepvalue, d_reps)$p.value
silverman(fit1, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
umap(dist_lin1, n_components=1)
fit2 <- umap(dist_lin1, n_components=1)
# Scale the data
fit2 <- scale(fit2)
dip(fit2, d_simulatepvalue, d_reps)$p.value
silverman(fit2, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
fit3 <- mds(dist_lin1, ndim = 1, type="ordinal", init = "random", ties="secondary")$conf
fit3 <- scale(fit3)
dip(fit3, d_simulatepvalue, d_reps)$p.value
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
RunningTimes
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
fit3 <- scale(fit3)
Results_CRDS_Lin1_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
fit3 <- scale(fit3)
Results_CRDS_Lin1_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
fit3 <- scale(fit3)
Results_CRDS_Lin1_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
fit3 <- scale(fit3)
Results_CRDS_Lin1_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
fit3 <- scale(fit3)
Results_CRDS_Lin1_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
fit3 <- scale(fit3)
Results_CRDS_Lin1_MDS_Dip[i,r] <- dip(fit3, d_simulatepvalue, d_reps)$p.value
silverman(fit1, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
fit3
fit3 <- scale(fit3)
silverman(fit3, s_k, s_m, s_adjust, s_digits, s_setseed)$p_value
